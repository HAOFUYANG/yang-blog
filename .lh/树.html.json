{
    "sourceFile": "树.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 37,
            "patches": [
                {
                    "date": 1648608270399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1648628548292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,30 @@\n   <div>深度优先遍历</div>\n   <div>广度优先遍历</div>\n </header>\n </html>\n-<script>\n+<script type=\"text/javascript\">\n+// 树\n+const tree = {\n+  val:'a',\n+  children:[\n+    {\n+      val:'b',\n+      children:[\n+        {val:'d',children:[]},\n+        {val:'e',children:[]}\n+      ]\n+    },\n+    {\n+      val:'c',\n+      children:[\n+        {val:'f',children:[]},\n+        {val:'g',children:[]}\n+      ]\n+    }\n+  ]\n+}\n+\n //递归\n \n //出站入站\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1648628554270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n       ]\n     }\n   ]\n }\n-\n+console.log('tree :>> ', tree);\n //递归\n \n //出站入站\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1648630269912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n       ]\n     }\n   ]\n }\n-console.log('tree :>> ', tree);\n //递归\n \n+\n+\n //出站入站\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1648630277465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   <div>广度优先遍历</div>\n </header>\n </html>\n <script type=\"text/javascript\">\n-// 树\n+// 树(模拟二叉树)\n const tree = {\n   val:'a',\n   children:[\n     {\n"
                },
                {
                    "date": 1648650386516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,10 @@\n       ]\n     }\n   ]\n }\n-//递归\n+//递归(深度优先搜索)\n+const \n \n \n-\n-//出站入站\n+//出站入站(广度优先搜索)\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1648650428840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n       ]\n     }\n   ]\n }\n-//递归(深度优先搜索)\n+//递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n const \n \n \n //出站入站(广度优先搜索)\n"
                },
                {
                    "date": 1648650472052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,12 @@\n     }\n   ]\n }\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n-const \n+const fun1 = (root)=>{\n+  console.log('root :>> ', root);\n+}\n+console.log('fun1(tree) :>> ', fun1(tree));\n \n \n //出站入站(广度优先搜索)\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1648650725928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,13 @@\n   ]\n }\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n const fun1 = (root)=>{\n-  console.log('root :>> ', root);\n+  const result = []\n+  result.push(root.value)\n+  root.value.forEach(item=>{\n+    fun1(item)\n+  })\n }\n console.log('fun1(tree) :>> ', fun1(tree));\n \n \n"
                },
                {
                    "date": 1648650736111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n const fun1 = (root)=>{\n   const result = []\n   result.push(root.value)\n-  root.value.forEach(item=>{\n+  root.val.forEach(item=>{\n     fun1(item)\n   })\n }\n console.log('fun1(tree) :>> ', fun1(tree));\n"
                },
                {
                    "date": 1648650749579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n const fun1 = (root)=>{\n   const result = []\n   result.push(root.value)\n-  root.val.forEach(item=>{\n+  root.children.forEach(item=>{\n     fun1(item)\n   })\n }\n console.log('fun1(tree) :>> ', fun1(tree));\n"
                },
                {
                    "date": 1648650772194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n }\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n const fun1 = (root)=>{\n   const result = []\n-  result.push(root.value)\n+  result.push(root.val)\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n }\n"
                },
                {
                    "date": 1648650799082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n   result.push(root.val)\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n+  return result\n }\n console.log('fun1(tree) :>> ', fun1(tree));\n \n \n"
                },
                {
                    "date": 1648650818933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,11 @@\n   const result = []\n   result.push(root.val)\n   root.children.forEach(item=>{\n     fun1(item)\n+    return result\n   })\n-  return result\n+  \n }\n console.log('fun1(tree) :>> ', fun1(tree));\n \n \n"
                },
                {
                    "date": 1648650874086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,13 +26,10 @@\n   ]\n }\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n const fun1 = (root)=>{\n-  const result = []\n-  result.push(root.val)\n   root.children.forEach(item=>{\n     fun1(item)\n-    return result\n   })\n   \n }\n console.log('fun1(tree) :>> ', fun1(tree));\n"
                },
                {
                    "date": 1648650895637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,12 +26,12 @@\n   ]\n }\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n const fun1 = (root)=>{\n+  console.log(root)\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n-  \n }\n console.log('fun1(tree) :>> ', fun1(tree));\n \n \n"
                },
                {
                    "date": 1648650980170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   ]\n }\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n const fun1 = (root)=>{\n-  console.log(root)\n+  console.log(root.val)\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n }\n"
                },
                {
                    "date": 1648650998236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n }\n-console.log('fun1(tree) :>> ', fun1(tree));\n+fun1(tree)\n \n \n //出站入站(广度优先搜索)\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1648651098497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,10 @@\n }\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n const fun1 = (root)=>{\n   console.log(root.val)\n+  const result = []\n+  result.push(root.val)\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n }\n"
                },
                {
                    "date": 1648651111464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n const fun1 = (root)=>{\n   console.log(root.val)\n   const result = []\n   result.push(root.val)\n+  return result\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n }\n"
                },
                {
                    "date": 1648651117726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n const fun1 = (root)=>{\n   console.log(root.val)\n   const result = []\n   result.push(root.val)\n-  return result\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n }\n"
                },
                {
                    "date": 1648651124746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n   result.push(root.val)\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n+  return result\n }\n fun1(tree)\n \n \n"
                },
                {
                    "date": 1648651132386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   ]\n }\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n const fun1 = (root)=>{\n-  console.log(root.val)\n+  // console.log(root.val)\n   const result = []\n   result.push(root.val)\n   root.children.forEach(item=>{\n     fun1(item)\n"
                },
                {
                    "date": 1648651143160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n   })\n   return result\n }\n fun1(tree)\n+console.log('fun1(tree) :>> ', fun1(tree));\n \n \n //出站入站(广度优先搜索)\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1648651284458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,18 +26,15 @@\n   ]\n }\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n const fun1 = (root)=>{\n-  // console.log(root.val)\n-  const result = []\n-  result.push(root.val)\n+  console.log('root.val :>> ', root.val);\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n-  return result\n }\n fun1(tree)\n-console.log('fun1(tree) :>> ', fun1(tree));\n \n \n+\n //出站入站(广度优先搜索)\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1648651345728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,15 +25,16 @@\n     }\n   ]\n }\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n-const fun1 = (root)=>{\n+const fun1 = (root,array)=>{\n   console.log('root.val :>> ', root.val);\n+  array.push(root.val)\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n }\n-fun1(tree)\n+fun1(tree,[])\n \n \n \n //出站入站(广度优先搜索)\n"
                },
                {
                    "date": 1648651357876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,11 @@\n     }\n   ]\n }\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n-const fun1 = (root,array)=>{\n+const fun1 = (root,[])=>{\n   console.log('root.val :>> ', root.val);\n-  array.push(root.val)\n+  [].push(root.val)\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n }\n"
                },
                {
                    "date": 1648651371708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,16 +25,14 @@\n     }\n   ]\n }\n //递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n-const fun1 = (root,[])=>{\n-  console.log('root.val :>> ', root.val);\n-  [].push(root.val)\n+const fun1 = (root)=>{\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n }\n-fun1(tree,[])\n+fun1(tree)\n \n \n \n //出站入站(广度优先搜索)\n"
                },
                {
                    "date": 1648651615239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,16 +24,20 @@\n       ]\n     }\n   ]\n }\n-//递归(深度优先搜索)=>访问根节点，对根节点的children挨个深度优先搜索\n+//递归(深度优先搜索)\n+// 1.访问根节点，\n+// 2.对根节点的children挨个深度优先搜索\n const fun1 = (root)=>{\n   root.children.forEach(item=>{\n     fun1(item)\n   })\n }\n fun1(tree)\n \n-\n-\n-//出站入站(广度优先搜索)\n+//出队入队(广度优先搜索)\n+// 1.新建一个队列，把根节点入队\n+// 2.把队头出队\n+// 3.把队头的children挨个入队列\n+// 4.重复2，3步骤，直至队列为空\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1648651637537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,5 +39,9 @@\n // 1.新建一个队列，把根节点入队\n // 2.把队头出队\n // 3.把队头的children挨个入队列\n // 4.重复2，3步骤，直至队列为空\n+const fun2 = (root)=>{\n+\n+}\n+fun2(tree)\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1648651656420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,47 @@\n <html>\n-<header>\n-  <div>深度优先遍历</div>\n-  <div>广度优先遍历</div>\n-</header>\n+  <header>\n+    <div>深度优先遍历</div>\n+    <div>广度优先遍历</div>\n+  </header>\n </html>\n <script type=\"text/javascript\">\n-// 树(模拟二叉树)\n-const tree = {\n-  val:'a',\n-  children:[\n-    {\n-      val:'b',\n-      children:[\n-        {val:'d',children:[]},\n-        {val:'e',children:[]}\n-      ]\n-    },\n-    {\n-      val:'c',\n-      children:[\n-        {val:'f',children:[]},\n-        {val:'g',children:[]}\n-      ]\n-    }\n-  ]\n-}\n-//递归(深度优先搜索)\n-// 1.访问根节点，\n-// 2.对根节点的children挨个深度优先搜索\n-const fun1 = (root)=>{\n-  root.children.forEach(item=>{\n-    fun1(item)\n-  })\n-}\n-fun1(tree)\n+  // 树(模拟二叉树)\n+  const tree = {\n+    val: \"a\",\n+    children: [\n+      {\n+        val: \"b\",\n+        children: [\n\\ No newline at end of file\n+          { val: \"d\", children: [] },\n+          { val: \"e\", children: [] },\n+        ],\n+      },\n+      {\n+        val: \"c\",\n+        children: [\n+          { val: \"f\", children: [] },\n+          { val: \"g\", children: [] },\n+        ],\n+      },\n+    ],\n+  };\n+  //递归(深度优先搜索)\n+  // 1.访问根节点，\n+  // 2.对根节点的children挨个深度优先搜索\n+  const fun1 = (root) => {\n+    root.children.forEach((item) => {\n+      fun1(item);\n+    });\n+  };\n+  fun1(tree);\n \n-//出队入队(广度优先搜索)\n-// 1.新建一个队列，把根节点入队\n-// 2.把队头出队\n-// 3.把队头的children挨个入队列\n-// 4.重复2，3步骤，直至队列为空\n-const fun2 = (root)=>{\n-\n-}\n-fun2(tree)\n-</script>\n+  //出队入队(广度优先搜索)\n+  // 1.新建一个队列，把根节点入队\n+  // 2.把队头出队\n+  // 3.把队头的children挨个入队列\n+  // 4.重复2，3步骤，直至队列为空\n+  const fun2 = (root) => {\n+    const arr = [root];\n+  };\n+  fun2(tree);\n+</script>\n"
                },
                {
                    "date": 1648651765939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,7 +41,14 @@\n   // 3.把队头的children挨个入队列\n   // 4.重复2，3步骤，直至队列为空\n   const fun2 = (root) => {\n     const arr = [root];\n+    while(arr.length>0){\n+      const o = arr.shift()\n+      console.log('o.val :>> ', o.val);\n\\ No newline at end of file\n+      o.children.forEach(item=>{\n+        arr.push(item)\n+      })\n+    }\n   };\n   fun2(tree);\n-</script>\n+</script>\n"
                },
                {
                    "date": 1648651771349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,5 +50,5 @@\n       })\n     }\n   };\n   fun2(tree);\n-</script>\n\\ No newline at end of file\n+</script>\n"
                },
                {
                    "date": 1648651883890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     root.children.forEach((item) => {\n       fun1(item);\n     });\n   };\n-  fun1(tree);\n+  // fun1(tree);\n \n   //出队入队(广度优先搜索)\n   // 1.新建一个队列，把根节点入队\n   // 2.把队头出队\n"
                },
                {
                    "date": 1648651903811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,13 +28,14 @@\n   //递归(深度优先搜索)\n   // 1.访问根节点，\n   // 2.对根节点的children挨个深度优先搜索\n   const fun1 = (root) => {\n+    console.log('root.val :>> ', root.val);\n     root.children.forEach((item) => {\n       fun1(item);\n     });\n   };\n-  // fun1(tree);\n+  fun1(tree);\n \n   //出队入队(广度优先搜索)\n   // 1.新建一个队列，把根节点入队\n   // 2.把队头出队\n"
                },
                {
                    "date": 1648996781953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n     });\n   };\n   fun1(tree);\n \n-  //出队入队(广度优先搜索)\n-  // 1.新建一个队列，把根节点入队\n+  //出栈入栈(广度优先搜索)\n+  // 1.新建一个栈，把根节点入栈\n   // 2.把队头出队\n   // 3.把队头的children挨个入队列\n   // 4.重复2，3步骤，直至队列为空\n   const fun2 = (root) => {\n"
                },
                {
                    "date": 1648996799289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,10 @@\n   fun1(tree);\n \n   //出栈入栈(广度优先搜索)\n   // 1.新建一个栈，把根节点入栈\n-  // 2.把队头出队\n-  // 3.把队头的children挨个入队列\n+  // 2.把栈头出栈\n+  // 3.把栈头的children挨个入列\n   // 4.重复2，3步骤，直至队列为空\n   const fun2 = (root) => {\n     const arr = [root];\n     while(arr.length>0){\n"
                },
                {
                    "date": 1648996810110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,12 +35,12 @@\n     });\n   };\n   fun1(tree);\n \n-  //出栈入栈(广度优先搜索)\n-  // 1.新建一个栈，把根节点入栈\n-  // 2.把栈头出栈\n-  // 3.把栈头的children挨个入列\n+  //出队入队(广度优先搜索)\n+  // 1.新建一个队列，把根节点入队\n+  // 2.把队头出队\n+  // 3.把队头的children挨个入队列\n   // 4.重复2，3步骤，直至队列为空\n   const fun2 = (root) => {\n     const arr = [root];\n     while(arr.length>0){\n"
                }
            ],
            "date": 1648608270399,
            "name": "Commit-0",
            "content": "<html>\n<header>\n  <div>深度优先遍历</div>\n  <div>广度优先遍历</div>\n</header>\n</html>\n<script>\n//递归\n\n//出站入站\n</script>"
        }
    ]
}