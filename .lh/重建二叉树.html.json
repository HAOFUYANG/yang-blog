{
    "sourceFile": "重建二叉树.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 36,
            "patches": [
                {
                    "date": 1649768323071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1649768331327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n <html></html>\n <script type=\"text/javascript\">\n   \n </script>\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1649768338876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n <html></html>\n <script type=\"text/javascript\">\n   \n-</script>\n-  \n\\ No newline at end of file\n+</script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649768420255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n <html></html>\n <script type=\"text/javascript\">\n-  \n+  const pre = [1,2,4,7,3,5,6,8]\n+  const vin = [1,2,4,7,3,5,6,8]\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649770080123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,9 @@\n <html></html>\n <script type=\"text/javascript\">\n   const pre = [1,2,4,7,3,5,6,8]\n   const vin = [1,2,4,7,3,5,6,8]\n+\n+  function reConstructBinaryTree(pre, vin) {\n+    console.log('new TreeCode() :>> ', new TreeCode());\n+  }\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649770453972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,5 +5,6 @@\n \n   function reConstructBinaryTree(pre, vin) {\n     console.log('new TreeCode() :>> ', new TreeCode());\n   }\n+  reConstructBinaryTree(pre, vin)\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649770475282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,8 @@\n   const pre = [1,2,4,7,3,5,6,8]\n   const vin = [1,2,4,7,3,5,6,8]\n \n   function reConstructBinaryTree(pre, vin) {\n-    console.log('new TreeCode() :>> ', new TreeCode());\n+    console.log('new TreeCode() :>> ', new TreeCode(1));\n   }\n   reConstructBinaryTree(pre, vin)\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649770489099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,8 @@\n   const pre = [1,2,4,7,3,5,6,8]\n   const vin = [1,2,4,7,3,5,6,8]\n \n   function reConstructBinaryTree(pre, vin) {\n-    console.log('new TreeCode() :>> ', new TreeCode(1));\n+    console.log('new TreeNode() :>> ', new TreeNode());\n   }\n   reConstructBinaryTree(pre, vin)\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649770581914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,24 @@\n   const pre = [1,2,4,7,3,5,6,8]\n   const vin = [1,2,4,7,3,5,6,8]\n \n   function reConstructBinaryTree(pre, vin) {\n-    console.log('new TreeNode() :>> ', new TreeNode());\n-  }\n-  reConstructBinaryTree(pre, vin)\n+        if(pre.length === 0){\n+            return null;\n+        }\n+        if(pre.length === 1){\n+            return new TreeNode(pre[0]);\n+        }\n+        const value = pre[0];\n+        const index = vin.indexOf(value);\n+        const vinLeft = vin.slice(0,index);\n+        const vinRight = vin.slice(index+1);\n+        const preLeft = pre.slice(1,index+1);\n+        const preRight = pre.slice(index+1);\n+        const node = new TreeNode(value);\n+        node.left = reConstructBinaryTree(preLeft, vinLeft);\n+        node.right = reConstructBinaryTree(preRight, vinRight);\n+        return node;\n+    }\n+    reConstructBinaryTree(pre, vin)\n+    console.log('object :>> ', reConstructBinaryTree(pre, vin));\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649771239078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,19 @@\n <html></html>\n-<script type=\"text/javascript\">\n+<script type=\"text/javascript\" lang=\"ts\">\n   const pre = [1,2,4,7,3,5,6,8]\n   const vin = [1,2,4,7,3,5,6,8]\n \n+  class TreeNode {\n+      val: number\n+      left: TreeNode | null\n+      right: TreeNode | null\n+      constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n+          this.val = (val===undefined ? 0 : val)\n+          this.left = (left===undefined ? null : left)\n+          this.right = (right===undefined ? null : right)\n+      }\n+  }\n   function reConstructBinaryTree(pre, vin) {\n         if(pre.length === 0){\n             return null;\n         }\n"
                },
                {
                    "date": 1649771253871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n <html></html>\n-<script type=\"text/javascript\" lang=\"ts\">\n+<script type=\"text/typescript\">\n   const pre = [1,2,4,7,3,5,6,8]\n   const vin = [1,2,4,7,3,5,6,8]\n \n   class TreeNode {\n"
                },
                {
                    "date": 1649771268306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n           this.left = (left===undefined ? null : left)\n           this.right = (right===undefined ? null : right)\n       }\n   }\n+  console.log(' new TreeNode() :>> ',  new TreeNode());\n   function reConstructBinaryTree(pre, vin) {\n         if(pre.length === 0){\n             return null;\n         }\n"
                },
                {
                    "date": 1649771595470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,21 @@\n <html></html>\n-<script type=\"text/typescript\">\n+<script type=\"text/javascript\">\n+  function TreeNode(val) {\n+      this.val = val;\n+      this.left = this.right = null;\n+  }\n   const pre = [1,2,4,7,3,5,6,8]\n   const vin = [1,2,4,7,3,5,6,8]\n-\n-  class TreeNode {\n-      val: number\n-      left: TreeNode | null\n-      right: TreeNode | null\n-      constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n-          this.val = (val===undefined ? 0 : val)\n-          this.left = (left===undefined ? null : left)\n-          this.right = (right===undefined ? null : right)\n-      }\n-  }\n-  console.log(' new TreeNode() :>> ',  new TreeNode());\n   function reConstructBinaryTree(pre, vin) {\n         if(pre.length === 0){\n             return null;\n         }\n         if(pre.length === 1){\n             return new TreeNode(pre[0]);\n         }\n-        const value = pre[0];\n-        const index = vin.indexOf(value);\n-        const vinLeft = vin.slice(0,index);\n-        const vinRight = vin.slice(index+1);\n-        const preLeft = pre.slice(1,index+1);\n-        const preRight = pre.slice(index+1);\n-        const node = new TreeNode(value);\n-        node.left = reConstructBinaryTree(preLeft, vinLeft);\n-        node.right = reConstructBinaryTree(preRight, vinRight);\n-        return node;\n+        console.log('new TreeNode() :>> ', new TreeNode());\n+        \n     }\n     reConstructBinaryTree(pre, vin)\n     console.log('object :>> ', reConstructBinaryTree(pre, vin));\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649771991736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,17 @@\n   function TreeNode(val) {\n       this.val = val;\n       this.left = this.right = null;\n   }\n-  const pre = [1,2,4,7,3,5,6,8]\n-  const vin = [1,2,4,7,3,5,6,8]\n+  const pre = [1,2,4,7,3,5,6,8] //前序 节点是1\n+  const vin = [1,2,4,7,3,5,6,8] //中序\n   function reConstructBinaryTree(pre, vin) {\n         if(pre.length === 0){\n             return null;\n         }\n         if(pre.length === 1){\n             return new TreeNode(pre[0]);\n         }\n-        console.log('new TreeNode() :>> ', new TreeNode());\n         \n     }\n     reConstructBinaryTree(pre, vin)\n     console.log('object :>> ', reConstructBinaryTree(pre, vin));\n"
                },
                {
                    "date": 1649772270115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,23 @@\n   function TreeNode(val) {\n       this.val = val;\n       this.left = this.right = null;\n   }\n-  const pre = [1,2,4,7,3,5,6,8] //前序 节点是1\n+  const preorder = [1,2,4,7,3,5,6,8] //前序 节点是1\n   const vin = [1,2,4,7,3,5,6,8] //中序\n-  function reConstructBinaryTree(pre, vin) {\n-        if(pre.length === 0){\n+  function reConstructBinaryTree(preorder, inorder) {\n+        if(preorder.length === 0){\n             return null;\n         }\n-        if(pre.length === 1){\n-            return new TreeNode(pre[0]);\n+        if(preorder.length === 1){\n+            return new TreeNode(preorder[0]);\n         }\n+        // 找到根节点\n+        let rootVal = preorder[0]\n+        //跟节点在中序遍历中的索引\n+        let index = inorder.indexOf(rootVal)\n+        console.log('index :>> ', index);\n         \n     }\n-    reConstructBinaryTree(pre, vin)\n-    console.log('object :>> ', reConstructBinaryTree(pre, vin));\n+    reConstructBinaryTree(preorder, inorder)\n+    console.log('object :>> ', reConstructBinaryTree(preorder, inorder));\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649772284937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n       this.val = val;\n       this.left = this.right = null;\n   }\n   const preorder = [1,2,4,7,3,5,6,8] //前序 节点是1\n-  const vin = [1,2,4,7,3,5,6,8] //中序\n+  const inorder = [1,2,4,7,3,5,6,8] //中序\n   function reConstructBinaryTree(preorder, inorder) {\n         if(preorder.length === 0){\n             return null;\n         }\n"
                },
                {
                    "date": 1649772312225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n   function TreeNode(val) {\n       this.val = val;\n       this.left = this.right = null;\n   }\n-  const preorder = [1,2,4,7,3,5,6,8] //前序 节点是1\n-  const inorder = [1,2,4,7,3,5,6,8] //中序\n+  const preorder = [3,9,20,15,7] //前序 节点是1\n+  const inorder = [9,3,15,20,7] //中序\n   function reConstructBinaryTree(preorder, inorder) {\n         if(preorder.length === 0){\n             return null;\n         }\n"
                },
                {
                    "date": 1649772534948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,12 @@\n         // 找到根节点\n         let rootVal = preorder[0]\n         //跟节点在中序遍历中的索引\n         let index = inorder.indexOf(rootVal)\n-        console.log('index :>> ', index);\n-        \n+       //先序左子树\n+        let preLeft = preorder.slice(1,index+1)\n+        //先序右子树\n+        let preRight = preorder.slice(index+1)\n     }\n     reConstructBinaryTree(preorder, inorder)\n     console.log('object :>> ', reConstructBinaryTree(preorder, inorder));\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649772543365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n        //先序左子树\n         let preLeft = preorder.slice(1,index+1)\n         //先序右子树\n         let preRight = preorder.slice(index+1)\n+        console.log('preRight :>> ', preRight);\n     }\n     reConstructBinaryTree(preorder, inorder)\n     console.log('object :>> ', reConstructBinaryTree(preorder, inorder));\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649772646558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,12 @@\n        //先序左子树\n         let preLeft = preorder.slice(1,index+1)\n         //先序右子树\n         let preRight = preorder.slice(index+1)\n-        console.log('preRight :>> ', preRight);\n+        //中序左子树\n+        let inLeft = inorder.slice(0,index)\n+        //中序右子树\n+        let inRight = inorder.slice(index+1)\n     }\n     reConstructBinaryTree(preorder, inorder)\n     console.log('object :>> ', reConstructBinaryTree(preorder, inorder));\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649772823267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,13 @@\n         //中序左子树\n         let inLeft = inorder.slice(0,index)\n         //中序右子树\n         let inRight = inorder.slice(index+1)\n+        // 构建二叉树\n+        const node  = new TreeNode(rootVal)\n+        node.left = reConstructBinaryTree(preLeft,preRight)\n+        node.right = reConstructBinaryTree(inLeft,inRight)\n+        return node\n     }\n     reConstructBinaryTree(preorder, inorder)\n     console.log('object :>> ', reConstructBinaryTree(preorder, inorder));\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649772870788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n         //中序右子树\n         let inRight = inorder.slice(index+1)\n         // 构建二叉树\n         const node  = new TreeNode(rootVal)\n-        node.left = reConstructBinaryTree(preLeft,preRight)\n-        node.right = reConstructBinaryTree(inLeft,inRight)\n+        node.left = reConstructBinaryTree(preLeft,inLeft)\n+        node.right = reConstructBinaryTree(preRight,inRight)\n         return node\n     }\n     reConstructBinaryTree(preorder, inorder)\n     console.log('object :>> ', reConstructBinaryTree(preorder, inorder));\n"
                },
                {
                    "date": 1649772997776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n       this.left = this.right = null;\n   }\n   const preorder = [3,9,20,15,7] //前序 节点是1\n   const inorder = [9,3,15,20,7] //中序\n-  function reConstructBinaryTree(preorder, inorder) {\n+  var reConstructBinaryTree = (preorder, inorder)=> {\n         if(preorder.length === 0){\n             return null;\n         }\n         if(preorder.length === 1){\n"
                },
                {
                    "date": 1649918919515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,34 +3,53 @@\n   function TreeNode(val) {\n       this.val = val;\n       this.left = this.right = null;\n   }\n-  const preorder = [3,9,20,15,7] //前序 节点是1\n-  const inorder = [9,3,15,20,7] //中序\n-  var reConstructBinaryTree = (preorder, inorder)=> {\n-        if(preorder.length === 0){\n+  // const preorder = [3,9,20,15,7] //前序 节点是1\n+  // const inorder = [9,3,15,20,7] //中序\n+  // var reConstructBinaryTree = (preorder, inorder)=> {\n+  //       if(preorder.length === 0){\n+  //           return null;\n+  //       }\n+  //       if(preorder.length === 1){\n+  //           return new TreeNode(preorder[0]);\n+  //       }\n+  //       // 找到根节点\n+  //       let rootVal = preorder[0]\n+  //       //跟节点在中序遍历中的索引\n+  //       let index = inorder.indexOf(rootVal)\n+  //      //先序左子树\n+  //       let preLeft = preorder.slice(1,index+1)\n+  //       //先序右子树\n+  //       let preRight = preorder.slice(index+1)\n+  //       //中序左子树\n+  //       let inLeft = inorder.slice(0,index)\n+  //       //中序右子树\n+  //       let inRight = inorder.slice(index+1)\n+  //       // 构建二叉树\n+  //       const node  = new TreeNode(rootVal)\n+  //       node.left = reConstructBinaryTree(preLeft,inLeft)\n+  //       node.right = reConstructBinaryTree(preRight,inRight)\n+  //       return node\n+  //   }\n+  //   reConstructBinaryTree(preorder, inorder)\n+  //   console.log('object :>> ', reConstructBinaryTree(preorder, inorder));\n+\n+   var preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]\n+    var constructFromPrePost = function(preorder, postorder) {\n+       if(preorder.length === 0){\n             return null;\n         }\n         if(preorder.length === 1){\n             return new TreeNode(preorder[0]);\n         }\n-        // 找到根节点\n-        let rootVal = preorder[0]\n-        //跟节点在中序遍历中的索引\n-        let index = inorder.indexOf(rootVal)\n-       //先序左子树\n+        let head = preorder[0]\n+        let preLeftHead = preorder[1]\n+        let index = postorder.indexOf(preLeftHead) \n         let preLeft = preorder.slice(1,index+1)\n-        //先序右子树\n         let preRight = preorder.slice(index+1)\n-        //中序左子树\n-        let inLeft = inorder.slice(0,index)\n-        //中序右子树\n-        let inRight = inorder.slice(index+1)\n-        // 构建二叉树\n-        const node  = new TreeNode(rootVal)\n-        node.left = reConstructBinaryTree(preLeft,inLeft)\n-        node.right = reConstructBinaryTree(preRight,inRight)\n-        return node\n-    }\n-    reConstructBinaryTree(preorder, inorder)\n-    console.log('object :>> ', reConstructBinaryTree(preorder, inorder));\n+        let postLeft = postorder.slice(0,index)\n+        //?\n+        let postRight = postorder.slice(index,postorder.length-1)\n+        return [constructFromPrePost(preLeft, postLeft), head, constructFromPrePost(preRight, postRight)];\n+};\n </script>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1649918963880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <html></html>\n <script type=\"text/javascript\">\n   function TreeNode(val) {\n-      this.val = val;\n-      this.left = this.right = null;\n+    this.val = val;\n+    this.left = this.right = null;\n   }\n   // const preorder = [3,9,20,15,7] //前序 节点是1\n   // const inorder = [9,3,15,20,7] //中序\n   // var reConstructBinaryTree = (preorder, inorder)=> {\n@@ -33,23 +33,33 @@\n   //   }\n   //   reConstructBinaryTree(preorder, inorder)\n   //   console.log('object :>> ', reConstructBinaryTree(preorder, inorder));\n \n-   var preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]\n-    var constructFromPrePost = function(preorder, postorder) {\n-       if(preorder.length === 0){\n-            return null;\n-        }\n-        if(preorder.length === 1){\n-            return new TreeNode(preorder[0]);\n-        }\n-        let head = preorder[0]\n-        let preLeftHead = preorder[1]\n-        let index = postorder.indexOf(preLeftHead) \n-        let preLeft = preorder.slice(1,index+1)\n-        let preRight = preorder.slice(index+1)\n-        let postLeft = postorder.slice(0,index)\n-        //?\n-        let postRight = postorder.slice(index,postorder.length-1)\n-        return [constructFromPrePost(preLeft, postLeft), head, constructFromPrePost(preRight, postRight)];\n-};\n-</script>\n\\ No newline at end of file\n+  var preorder = [1, 2, 4, 5, 3, 6, 7],\n+    postorder = [4, 5, 2, 6, 7, 3, 1];\n+  var constructFromPrePost = function (preorder, postorder) {\n+    if (preorder.length === 0) {\n+      return null;\n+    }\n+    if (preorder.length === 1) {\n+      return new TreeNode(preorder[0]);\n+    }\n+    let head = preorder[0];\n+    let preLeftHead = preorder[1];\n+    let index = postorder.indexOf(preLeftHead);\n+    let preLeft = preorder.slice(1, index + 1);\n+    let preRight = preorder.slice(index + 1);\n+    let postLeft = postorder.slice(0, index);\n+    //?\n+    let postRight = postorder.slice(index, postorder.length - 1);\n+    return [\n+      constructFromPrePost(preLeft, postLeft),\n+      head,\n+      constructFromPrePost(preRight, postRight),\n+    ];\n+  };\n+  constructFromPrePost(preorder, postorder);\n+  console.log(\n+    \"constructFromPrePost(preorder,postorder) :>> \",\n+    constructFromPrePost(preorder, postorder)\n+  );\n+</script>\n"
                },
                {
                    "date": 1649919011143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,13 +50,13 @@\n     let preRight = preorder.slice(index + 1);\n     let postLeft = postorder.slice(0, index);\n     //?\n     let postRight = postorder.slice(index, postorder.length - 1);\n-    return [\n-      constructFromPrePost(preLeft, postLeft),\n-      head,\n-      constructFromPrePost(preRight, postRight),\n-    ];\n+    return \n+      constructFromPrePost(preLeft, postLeft)+\n+      head+\n+      constructFromPrePost(preRight, postRight)\n+    \n   };\n   constructFromPrePost(preorder, postorder);\n   console.log(\n     \"constructFromPrePost(preorder,postorder) :>> \",\n"
                },
                {
                    "date": 1649919032667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,12 +50,9 @@\n     let preRight = preorder.slice(index + 1);\n     let postLeft = postorder.slice(0, index);\n     //?\n     let postRight = postorder.slice(index, postorder.length - 1);\n-    return \n-      constructFromPrePost(preLeft, postLeft)+\n-      head+\n-      constructFromPrePost(preRight, postRight)\n+    return constructFromPrePost(preLeft, postLeft) + head + constructFromPrePost(preRight, postRight)\n     \n   };\n   constructFromPrePost(preorder, postorder);\n   console.log(\n"
                },
                {
                    "date": 1649919204530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,8 @@\n     let postLeft = postorder.slice(0, index);\n     //?\n     let postRight = postorder.slice(index, postorder.length - 1);\n     return constructFromPrePost(preLeft, postLeft) + head + constructFromPrePost(preRight, postRight)\n-    \n   };\n   constructFromPrePost(preorder, postorder);\n   console.log(\n     \"constructFromPrePost(preorder,postorder) :>> \",\n"
                },
                {
                    "date": 1649919213578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,10 @@\n   //   }\n   //   reConstructBinaryTree(preorder, inorder)\n   //   console.log('object :>> ', reConstructBinaryTree(preorder, inorder));\n \n-  var preorder = [1, 2, 4, 5, 3, 6, 7],\n-    postorder = [4, 5, 2, 6, 7, 3, 1];\n+  var preorder = [1, 2, 4, 5, 3, 6, 7]\n+   var  postorder = [4, 5, 2, 6, 7, 3, 1];\n   var constructFromPrePost = function (preorder, postorder) {\n     if (preorder.length === 0) {\n       return null;\n     }\n"
                },
                {
                    "date": 1649919229778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,16 +34,17 @@\n   //   reConstructBinaryTree(preorder, inorder)\n   //   console.log('object :>> ', reConstructBinaryTree(preorder, inorder));\n \n   var preorder = [1, 2, 4, 5, 3, 6, 7]\n-   var  postorder = [4, 5, 2, 6, 7, 3, 1];\n+  var  postorder = [4, 5, 2, 6, 7, 3, 1];\n   var constructFromPrePost = function (preorder, postorder) {\n     if (preorder.length === 0) {\n       return null;\n     }\n     if (preorder.length === 1) {\n       return new TreeNode(preorder[0]);\n     }\n+    debugger\n     let head = preorder[0];\n     let preLeftHead = preorder[1];\n     let index = postorder.indexOf(preLeftHead);\n     let preLeft = preorder.slice(1, index + 1);\n"
                },
                {
                    "date": 1649919329864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,10 @@\n     debugger\n     let head = preorder[0];\n     let preLeftHead = preorder[1];\n     let index = postorder.indexOf(preLeftHead);\n-    let preLeft = preorder.slice(1, index + 1);\n-    let preRight = preorder.slice(index + 1);\n+    let preLeft = preorder.slice(1, index + 2);\n+    let preRight = preorder.slice(index + 2);\n     let postLeft = postorder.slice(0, index);\n     //?\n     let postRight = postorder.slice(index, postorder.length - 1);\n     return constructFromPrePost(preLeft, postLeft) + head + constructFromPrePost(preRight, postRight)\n"
                },
                {
                    "date": 1649919399995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,11 @@\n     let preLeftHead = preorder[1];\n     let index = postorder.indexOf(preLeftHead);\n     let preLeft = preorder.slice(1, index + 2);\n     let preRight = preorder.slice(index + 2);\n-    let postLeft = postorder.slice(0, index);\n+    let postLeft = postorder.slice(0, index+1);\n     //?\n-    let postRight = postorder.slice(index, postorder.length - 1);\n+    let postRight = postorder.slice(index+1, postorder.length - 1);\n     return constructFromPrePost(preLeft, postLeft) + head + constructFromPrePost(preRight, postRight)\n   };\n   constructFromPrePost(preorder, postorder);\n   console.log(\n"
                },
                {
                    "date": 1649919406550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,16 +42,17 @@\n     }\n     if (preorder.length === 1) {\n       return new TreeNode(preorder[0]);\n     }\n-    debugger\n+    \n     let head = preorder[0];\n     let preLeftHead = preorder[1];\n     let index = postorder.indexOf(preLeftHead);\n     let preLeft = preorder.slice(1, index + 2);\n     let preRight = preorder.slice(index + 2);\n     let postLeft = postorder.slice(0, index+1);\n     //?\n+    debugger\n     let postRight = postorder.slice(index+1, postorder.length - 1);\n     return constructFromPrePost(preLeft, postLeft) + head + constructFromPrePost(preRight, postRight)\n   };\n   constructFromPrePost(preorder, postorder);\n"
                },
                {
                    "date": 1649919447984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,8 @@\n     let preLeft = preorder.slice(1, index + 2);\n     let preRight = preorder.slice(index + 2);\n     let postLeft = postorder.slice(0, index+1);\n     //?\n-    debugger\n     let postRight = postorder.slice(index+1, postorder.length - 1);\n     return constructFromPrePost(preLeft, postLeft) + head + constructFromPrePost(preRight, postRight)\n   };\n   constructFromPrePost(preorder, postorder);\n"
                },
                {
                    "date": 1649919488704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     let preRight = preorder.slice(index + 2);\n     let postLeft = postorder.slice(0, index+1);\n     //?\n     let postRight = postorder.slice(index+1, postorder.length - 1);\n-    return constructFromPrePost(preLeft, postLeft) + head + constructFromPrePost(preRight, postRight)\n+    return constructFromPrePost(preLeft, postLeft) \n   };\n   constructFromPrePost(preorder, postorder);\n   console.log(\n     \"constructFromPrePost(preorder,postorder) :>> \",\n"
                },
                {
                    "date": 1649919502012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     let preRight = preorder.slice(index + 2);\n     let postLeft = postorder.slice(0, index+1);\n     //?\n     let postRight = postorder.slice(index+1, postorder.length - 1);\n-    return constructFromPrePost(preLeft, postLeft) \n+    return constructFromPrePost(preLeft, postLeft) + head + constructFromPrePost(preRight, postRight)\n   };\n   constructFromPrePost(preorder, postorder);\n   console.log(\n     \"constructFromPrePost(preorder,postorder) :>> \",\n"
                },
                {
                    "date": 1649919698021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,12 @@\n     let preRight = preorder.slice(index + 2);\n     let postLeft = postorder.slice(0, index+1);\n     //?\n     let postRight = postorder.slice(index+1, postorder.length - 1);\n-    return constructFromPrePost(preLeft, postLeft) + head + constructFromPrePost(preRight, postRight)\n+    let root = new TreeNode(head);\n+    root.left = constructFromPrePost(preLeft,postLeft)\n+    root.right = constructFromPrePost(preRight,postRight)\n+    return root\n   };\n   constructFromPrePost(preorder, postorder);\n   console.log(\n     \"constructFromPrePost(preorder,postorder) :>> \",\n"
                }
            ],
            "date": 1649768323071,
            "name": "Commit-0",
            "content": "<html></html>\n<script type=\"text/javascript\">\n  \n</script>\n"
        }
    ]
}