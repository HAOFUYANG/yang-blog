{
    "sourceFile": "docs/dataStructure/树简介/简介.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 31,
            "patches": [
                {
                    "date": 1648653422306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1648653642141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,40 +9,5 @@\n ![](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n \n ### 二叉树遍历\n \n-> 重点中的重点，最好同时掌握递归和非递归版本，递归版本很容易书写，但是真正考察基本功的是非递归版本。\n-\n-- [二叉树的中序遍历](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.html)\n-- [二叉树的前序遍历](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.html)\n-- [二叉树的后序遍历](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.html)\n-\n-> 根据前序遍历和中序遍历的特点重建二叉树，逆向思维，很有意思的题目\n-\n-- [重建二叉树](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n-- [求二叉树的遍历](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E9%A2%98%E7%9B%AE2-%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86)\n-\n-### 二叉树的对称性\n-\n-- [对称的二叉树](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n-- [二叉树的镜像](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F.html)\n-\n-### 二叉搜索树\n-\n-> 二叉搜索树是特殊的二叉树，考察二叉搜索树的题目一般都是考察二叉搜索树的特性，所以掌握好它的特性很重要。\n-\n-1. 若任意节点的左⼦子树不不空，则左⼦子树上所有结点的值均⼩小于它的 根结点的值;\n-2. 若任意节点的右⼦子树不不空，则右⼦子树上所有结点的值均⼤大于它的 根结点的值;\n-3. 任意节点的左、右⼦子树也分别为⼆二叉查找树。\n-\n-- [二叉搜索树的第 k 个节点](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9.html#%E9%A2%98%E7%9B%AE)\n-- [二叉搜索树的后序遍历](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.html)\n-\n-### 二叉树的深度\n-\n-> 二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n-\n-> 平衡二叉树：左右子树深度之差大于 1\n-\n-- [二叉树的最大深度](http://www.conardli.top/docs/dataStructure/二叉树/二叉树的最大深度.html)\n-- [二叉树的最小深度](http://www.conardli.top/docs/dataStructure/二叉树/二叉树的最小深度.html#考察点)\n-- [平衡二叉树](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n+- [二叉树的中序遍历](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%\n"
                },
                {
                    "date": 1648653663165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n ---\n-{ \"title\": \"二叉树-概览\" }\n+{ \"title\": \"简介\" }\n ---\n \n 树是用来模拟具有树状结构性质的数据集合。根据它的特性可以分为非常多的种类，对于我们来讲，掌握二叉树这种结构就足够了，它也是树最简单、应用最广泛的种类。\n \n@@ -9,5 +9,5 @@\n ![](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n \n ### 二叉树遍历\n \n-- [二叉树的中序遍历](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%\n+- [二叉树的中序遍历]\n"
                },
                {
                    "date": 1648653681343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,7 +7,7 @@\n > 二叉树是一种典型的树树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”。\n \n ![](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n \n-### 二叉树遍历\n+### 模拟树结构\n \n - [二叉树的中序遍历]\n"
                },
                {
                    "date": 1648653697118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n ---\n { \"title\": \"简介\" }\n ---\n \n+### 树\n+\n 树是用来模拟具有树状结构性质的数据集合。根据它的特性可以分为非常多的种类，对于我们来讲，掌握二叉树这种结构就足够了，它也是树最简单、应用最广泛的种类。\n \n > 二叉树是一种典型的树树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”。\n \n"
                },
                {
                    "date": 1648653706575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,5 +11,5 @@\n ![](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n \n ### 模拟树结构\n \n-- [二叉树的中序遍历]\n+- [代码]\n"
                },
                {
                    "date": 1648653755723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,4 +12,9 @@\n \n ### 模拟树结构\n \n - [代码]\n+  示例:\n+\n+```js\n+const\n+```\n"
                },
                {
                    "date": 1648653788916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,9 @@\n ![](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n \n ### 模拟树结构\n \n-- [代码]\n-  示例:\n+- 代码示例:\n \n ```js\n const\n ```\n"
                },
                {
                    "date": 1648653829936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,29 @@\n > 二叉树是一种典型的树树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”。\n \n ![](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n \n-### 模拟树结构\n+### 树结构\n \n-- 代码示例:\n+- 模拟二叉树:\n \n ```js\n-const\n+const tree = {\n+  val: \"a\",\n+  children: [\n+    {\n+      val: \"b\",\n+      children: [\n+        { val: \"d\", children: [] },\n+        { val: \"e\", children: [] },\n+      ],\n+    },\n+    {\n+      val: \"c\",\n+      children: [\n+        { val: \"f\", children: [] },\n+        { val: \"g\", children: [] },\n+      ],\n+    },\n+  ],\n+};\n ```\n"
                },
                {
                    "date": 1648799794690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,12 @@\n ![](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n \n ### 树结构\n \n-- 模拟二叉树:\n+- 多叉树：\n \n+- 模拟二叉树(最常见):\n+\n ```js\n const tree = {\n   val: \"a\",\n   children: [\n"
                },
                {
                    "date": 1648863088102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \n ### 树结构\n \n - 多叉树：\n-\n+  例如：DOM 结构\n - 模拟二叉树(最常见):\n \n ```js\n const tree = {\n"
                },
                {
                    "date": 1648863143820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,18 @@\n ### 树结构\n \n - 多叉树：\n   例如：DOM 结构\n+\n+```html\n+<div>\n+  <span></span>\n+  <span></span>\n+  <span></span>\n+  <span></span>\n+</div>\n+```\n+\n - 模拟二叉树(最常见):\n \n ```js\n const tree = {\n"
                },
                {
                    "date": 1648863949182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,10 @@\n   <span></span>\n </div>\n ```\n \n-- 模拟二叉树(最常见):\n+- 二叉树(最常见):\n+  <img :src=\"$withBase('/机器人运动范围.gif')\" alt=\"foo\">\n \n ```js\n const tree = {\n   val: \"a\",\n"
                },
                {
                    "date": 1648863969815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n </div>\n ```\n \n - 二叉树(最常见):\n-  <img :src=\"$withBase('/机器人运动范围.gif')\" alt=\"foo\">\n+  <img :src=\"$withBase('/static/image/二叉树.jpeg')\" alt=\"foo\">\n \n ```js\n const tree = {\n   val: \"a\",\n"
                },
                {
                    "date": 1648863988853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n </div>\n ```\n \n - 二叉树(最常见):\n-  <img :src=\"$withBase('/static/image/二叉树.jpeg')\" alt=\"foo\">\n+  <img :src=\"/static/image/二叉树.jpeg\">\n \n ```js\n const tree = {\n   val: \"a\",\n"
                },
                {
                    "date": 1648864001704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n </div>\n ```\n \n - 二叉树(最常见):\n-  <img :src=\"/static/image/二叉树.jpeg\">\n+  <img src=\"/static/image/二叉树.jpeg\">\n \n ```js\n const tree = {\n   val: \"a\",\n"
                },
                {
                    "date": 1648864132901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n </div>\n ```\n \n - 二叉树(最常见):\n-  <img src=\"/static/image/二叉树.jpeg\">\n+  <img :src=\"$withBase('/dist/img/二叉树.jpeg')\" alt=\"foo\">\n \n ```js\n const tree = {\n   val: \"a\",\n"
                },
                {
                    "date": 1648864353415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n </div>\n ```\n \n - 二叉树(最常见):\n-  <img :src=\"$withBase('/dist/img/二叉树.jpeg')\" alt=\"foo\">\n+  <img :src=\"$withBase('/二叉树.jpeg')\" alt=\"foo\">\n \n ```js\n const tree = {\n   val: \"a\",\n"
                },
                {
                    "date": 1648865050267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,17 +16,17 @@\n   例如：DOM 结构\n \n ```html\n <div>\n+  <img :src=\"$withBase('/二叉树.jpeg')\" alt=\"foo\" />\n   <span></span>\n   <span></span>\n   <span></span>\n   <span></span>\n </div>\n ```\n \n - 二叉树(最常见):\n-  <img :src=\"$withBase('/二叉树.jpeg')\" alt=\"foo\">\n \n ```js\n const tree = {\n   val: \"a\",\n"
                },
                {
                    "date": 1648865060638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,17 +16,17 @@\n   例如：DOM 结构\n \n ```html\n <div>\n-  <img :src=\"$withBase('/二叉树.jpeg')\" alt=\"foo\" />\n   <span></span>\n   <span></span>\n   <span></span>\n   <span></span>\n </div>\n ```\n \n - 二叉树(最常见):\n+  <img :src=\"$withBase('/二叉树.jpeg')\" alt=\"foo\">\n \n ```js\n const tree = {\n   val: \"a\",\n"
                },
                {
                    "date": 1648865193468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n </div>\n ```\n \n - 二叉树(最常见):\n-  <img :src=\"$withBase('/二叉树.jpeg')\" alt=\"foo\">\n+  <img :src=\"$withBase('../../../dist/img/二叉树.jpeg')\" alt=\"foo\">\n \n ```js\n const tree = {\n   val: \"a\",\n"
                },
                {
                    "date": 1648865373812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n </div>\n ```\n \n - 二叉树(最常见):\n-  <img :src=\"$withBase('../../../dist/img/二叉树.jpeg')\" alt=\"foo\">\n+  <img :src=\"$withBase('/dist/img/二叉树.jpeg')\" alt=\"foo\">\n \n ```js\n const tree = {\n   val: \"a\",\n"
                },
                {
                    "date": 1648865573066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n </div>\n ```\n \n - 二叉树(最常见):\n-  <img :src=\"$withBase('/dist/img/二叉树.jpeg')\" alt=\"foo\">\n+  <img :src=\"$withBase('/二叉树.jpeg')\" alt=\"foo\">\n \n ```js\n const tree = {\n   val: \"a\",\n"
                },
                {
                    "date": 1648865595368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,11 @@\n </div>\n ```\n \n - 二叉树(最常见):\n-  <img :src=\"$withBase('/二叉树.jpeg')\" alt=\"foo\">\n \n+ <img :src=\"$withBase('/二叉树.jpeg')\" alt=\"foo\">\n+\n ```js\n const tree = {\n   val: \"a\",\n   children: [\n"
                },
                {
                    "date": 1648865813613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n 树是用来模拟具有树状结构性质的数据集合。根据它的特性可以分为非常多的种类，对于我们来讲，掌握二叉树这种结构就足够了，它也是树最简单、应用最广泛的种类。\n \n > 二叉树是一种典型的树树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”。\n \n-![](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n+![AHAHAHAHAH](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n \n ### 树结构\n \n - 多叉树：\n"
                },
                {
                    "date": 1648865833624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n 树是用来模拟具有树状结构性质的数据集合。根据它的特性可以分为非常多的种类，对于我们来讲，掌握二叉树这种结构就足够了，它也是树最简单、应用最广泛的种类。\n \n > 二叉树是一种典型的树树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”。\n \n-![AHAHAHAHAH](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n+![](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n \n ### 树结构\n \n - 多叉树：\n"
                },
                {
                    "date": 1648865862762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,12 @@\n ![](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n \n ### 树结构\n \n-- 多叉树：\n-  例如：DOM 结构\n+#### 多叉树：\n \n+例如：DOM 结构\n+\n ```html\n <div>\n   <span></span>\n   <span></span>\n"
                },
                {
                    "date": 1648865879155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,11 @@\n ![](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n \n ### 树结构\n \n-#### 多叉树：\n+- 多叉树：\n+  例如：DOM 结构\n \n-例如：DOM 结构\n-\n ```html\n <div>\n   <span></span>\n   <span></span>\n"
                },
                {
                    "date": 1648866840622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \n ### 树结构\n \n - 多叉树：\n-  例如：DOM 结构\n+  例如：_DOM 结构_\n \n ```html\n <div>\n   <span></span>\n"
                },
                {
                    "date": 1648866864595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \n ### 树结构\n \n - 多叉树：\n-  例如：_DOM 结构_\n+  例如：**DOM 结构**\n \n ```html\n <div>\n   <span></span>\n"
                },
                {
                    "date": 1648867324410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,12 @@\n - 二叉树(最常见):\n \n  <img :src=\"$withBase('/二叉树.jpeg')\" alt=\"foo\">\n \n+::: details\n+这是一个详情块，在 IE / Edge 中不生效\n+:::\n+\n ```js\n const tree = {\n   val: \"a\",\n   children: [\n"
                },
                {
                    "date": 1648867337323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,12 +27,8 @@\n - 二叉树(最常见):\n \n  <img :src=\"$withBase('/二叉树.jpeg')\" alt=\"foo\">\n \n-::: details\n-这是一个详情块，在 IE / Edge 中不生效\n-:::\n-\n ```js\n const tree = {\n   val: \"a\",\n   children: [\n"
                }
            ],
            "date": 1648653422306,
            "name": "Commit-0",
            "content": "---\n{ \"title\": \"二叉树-概览\" }\n---\n\n树是用来模拟具有树状结构性质的数据集合。根据它的特性可以分为非常多的种类，对于我们来讲，掌握二叉树这种结构就足够了，它也是树最简单、应用最广泛的种类。\n\n> 二叉树是一种典型的树树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”。\n\n![](https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg)\n\n### 二叉树遍历\n\n> 重点中的重点，最好同时掌握递归和非递归版本，递归版本很容易书写，但是真正考察基本功的是非递归版本。\n\n- [二叉树的中序遍历](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.html)\n- [二叉树的前序遍历](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.html)\n- [二叉树的后序遍历](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.html)\n\n> 根据前序遍历和中序遍历的特点重建二叉树，逆向思维，很有意思的题目\n\n- [重建二叉树](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n- [求二叉树的遍历](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E9%A2%98%E7%9B%AE2-%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86)\n\n### 二叉树的对称性\n\n- [对称的二叉树](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n- [二叉树的镜像](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F.html)\n\n### 二叉搜索树\n\n> 二叉搜索树是特殊的二叉树，考察二叉搜索树的题目一般都是考察二叉搜索树的特性，所以掌握好它的特性很重要。\n\n1. 若任意节点的左⼦子树不不空，则左⼦子树上所有结点的值均⼩小于它的 根结点的值;\n2. 若任意节点的右⼦子树不不空，则右⼦子树上所有结点的值均⼤大于它的 根结点的值;\n3. 任意节点的左、右⼦子树也分别为⼆二叉查找树。\n\n- [二叉搜索树的第 k 个节点](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9.html#%E9%A2%98%E7%9B%AE)\n- [二叉搜索树的后序遍历](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.html)\n\n### 二叉树的深度\n\n> 二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n\n> 平衡二叉树：左右子树深度之差大于 1\n\n- [二叉树的最大深度](http://www.conardli.top/docs/dataStructure/二叉树/二叉树的最大深度.html)\n- [二叉树的最小深度](http://www.conardli.top/docs/dataStructure/二叉树/二叉树的最小深度.html#考察点)\n- [平衡二叉树](http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html)\n"
        }
    ]
}