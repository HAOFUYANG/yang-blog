{
    "sourceFile": "docs/dataStructure/二叉树/中序遍历.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1648987766595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1649060044235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,91 @@\n ---\n { \"title\": \"中序遍历\" }\n ---\n+\n+### 步骤\n+\n+- 中序遍历:左根右\n+\n+### 题目\n+\n+#### LeeCode 144 题\n+\n+```js\n+const tree = {\n+  val: \"1\",\n+  left: {\n+    val: \"2\",\n+    left: { val: \"4\", left: null, right: null },\n+    right: { val: \"5\", left: null, right: null },\n+  },\n+  right: {\n+    val: \"3\",\n+    left: { val: \"6\", left: null, right: null },\n+    right: { val: \"7\", left: null, right: null },\n+  },\n+};\n+```\n+\n+**递归**\n+\n+```js\n+var preorderTraversal = function (root) {\n+  if (!root.val) return [];\n+  const result = [];\n+  var func = (node) => {\n+    if (node) {\n+      // 先添加根节点\n+      result.push(node.val);\n+      //遍历左子树\n+      func(node.left);\n+      //遍历右子树\n+      func(node.right);\n+    }\n+  };\n+  func(root);\n+  return result;\n+};\n+preorderTraversal(tree);\n+```\n+\n+**栈（非递归实现）**\n+\n+- 取根节点为目标节点，开始遍历\n+- 1.左孩子入栈 -> 直至左孩子为空的节点\n+- 2.栈顶节点的右节点为空或右节点被访问过 -> 节点出栈并访问他，将节点标记为已访问\n+- 3.栈顶节点的右节点不为空且未被访问，以右孩子为目标节点，再依次执行 1、2、3\n+\n+```js\n+var preorderTraversal = function (root) {\n+  if (!root.val) return [];\n+  let result = [];\n+  let stack = [root]; //定义栈\n+  while (stack.length) {\n+    //出栈\n+    let o = stack.pop();\n+    result.push(o.val);\n+    //入栈\n+    o.right && stack.push(o.right);\n+    o.left && stack.push(o.left);\n+  }\n+  return result;\n+};\n+preorderTraversal(tree);\n+//或者\n+var preorderTraversal = function (root) {\n+  const result = [];\n+  const stack = [];\n+  let current = root;\n+  while (current || stack.length > 0) {\n+    while (current) {\n+      result.push(current.val);\n+      stack.push(current);\n+      current = current.left;\n+    }\n+    current = stack.pop();\n+    current = current.right;\n+  }\n+  return result;\n+};\n+preorderTraversal(tree);\n+```\n"
                },
                {
                    "date": 1649135252681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,12 +49,10 @@\n ```\n \n **栈（非递归实现）**\n \n-- 取根节点为目标节点，开始遍历\n-- 1.左孩子入栈 -> 直至左孩子为空的节点\n-- 2.栈顶节点的右节点为空或右节点被访问过 -> 节点出栈并访问他，将节点标记为已访问\n-- 3.栈顶节点的右节点不为空且未被访问，以右孩子为目标节点，再依次执行 1、2、3\n+- 每颗子树整棵树左边界进栈，\n+- 依次弹出的过程中，push，并对弹出节点的右树重复如上操作\n \n ```js\n var preorderTraversal = function (root) {\n   if (!root.val) return [];\n"
                },
                {
                    "date": 1649135285867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n ```\n \n **栈（非递归实现）**\n \n-- 每颗子树整棵树左边界进栈，\n+- 每颗子树整棵树左边界全部进栈，\n - 依次弹出的过程中，push，并对弹出节点的右树重复如上操作\n \n ```js\n var preorderTraversal = function (root) {\n"
                },
                {
                    "date": 1649137310877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,24 +54,8 @@\n - 依次弹出的过程中，push，并对弹出节点的右树重复如上操作\n \n ```js\n var preorderTraversal = function (root) {\n-  if (!root.val) return [];\n-  let result = [];\n-  let stack = [root]; //定义栈\n-  while (stack.length) {\n-    //出栈\n-    let o = stack.pop();\n-    result.push(o.val);\n-    //入栈\n-    o.right && stack.push(o.right);\n-    o.left && stack.push(o.left);\n-  }\n-  return result;\n-};\n-preorderTraversal(tree);\n-//或者\n-var preorderTraversal = function (root) {\n   const result = [];\n   const stack = [];\n   let current = root;\n   while (current || stack.length > 0) {\n"
                },
                {
                    "date": 1649138955912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,13 +59,13 @@\n   const stack = [];\n   let current = root;\n   while (current || stack.length > 0) {\n     while (current) {\n-      result.push(current.val);\n       stack.push(current);\n       current = current.left;\n     }\n     current = stack.pop();\n+    result.push(current.val);\n     current = current.right;\n   }\n   return result;\n };\n"
                },
                {
                    "date": 1649171095975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n };\n preorderTraversal(tree);\n ```\n \n-**栈（非递归实现）**\n+**栈（非递归实现\n \n - 每颗子树整棵树左边界全部进栈，\n - 依次弹出的过程中，push，并对弹出节点的右树重复如上操作\n \n"
                },
                {
                    "date": 1649171119575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n };\n preorderTraversal(tree);\n ```\n \n-**栈（非递归实现\n+**栈（非递归实现)**\n \n - 每颗子树整棵树左边界全部进栈，\n - 依次弹出的过程中，push，并对弹出节点的右树重复如上操作\n \n"
                },
                {
                    "date": 1649171127285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n   return result;\n };\n preorderTraversal(tree);\n ```\n-\n+ \n **栈（非递归实现)**\n \n - 每颗子树整棵树左边界全部进栈，\n - 依次弹出的过程中，push，并对弹出节点的右树重复如上操作\n"
                }
            ],
            "date": 1648987766595,
            "name": "Commit-0",
            "content": "---\n{ \"title\": \"中序遍历\" }\n---\n"
        }
    ]
}