(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{504:function(o,e,t){"use strict";t.r(e);var i=t(59),s=Object(i.a)({},(function(){var o=this,e=o.$createElement,t=o._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[t("h1",{attrs:{id:"token和cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#token和cookie"}},[o._v("#")]),o._v(" token和cookie")]),o._v(" "),t("h2",{attrs:{id:"cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[o._v("#")]),o._v(" cookie")]),o._v(" "),t("p",[o._v("http 请求是无状态的，即每次请求之后都会断开链接。"),t("br"),o._v("\n所以，"),t("br"),o._v("\n引入cookie，客户端向同一个域名下发送请求，会携带相同的 cookie，服务器拿到 cookie 进行解析，便能拿到客户端的状态。而服务端可以通过响应头中的Set-Cookie字段来对客户端写入Cookie"),t("br"),o._v("\n由于每次请求都携带 cookie ，所以 cookie 大小限制 4kb 以内。")]),o._v(" "),t("p",[t("img",{attrs:{src:"/http/cookie.png",alt:""}})]),o._v(" "),t("h3",{attrs:{id:"cookie跨域限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie跨域限制"}},[o._v("#")]),o._v(" cookie跨域限制")]),o._v(" "),t("p",[o._v("浏览器存储 cookie 是按照域名区分的，在浏览器无法通过 JS "),t("code",[o._v("document.cookie")]),o._v(" 获取到其他域名的 cookie")]),o._v(" "),t("h4",{attrs:{id:"解决cookie跨域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决cookie跨域"}},[o._v("#")]),o._v(" 解决cookie跨域")]),o._v(" "),t("p",[o._v("http 请求传递 cookie 默认有跨域限制。如果想要开启，需要客户端和服务器同时设置允许")]),o._v(" "),t("ul",[t("li",[o._v("客户端：使用 fetch 和 XMLHttpRequest 或者 axios 需要配置 "),t("code",[o._v("withCredentials")])]),o._v(" "),t("li",[o._v("服务端：需要配置 header "),t("code",[o._v("Access-Control-Allow-Credentials")])])]),o._v(" "),t("h3",{attrs:{id:"浏览器禁用第三方-cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器禁用第三方-cookie"}},[o._v("#")]),o._v(" 浏览器禁用第三方 cookie")]),o._v(" "),t("p",[o._v("现代浏览器都开始禁用第三方 cookie （第三方 js 设置 cookie），打击第三方广告，保护用户个人隐私。")]),o._v(" "),t("p",[o._v("例如一个电商网站 A 引用了淘宝广告的 js")]),o._v(" "),t("ul",[t("li",[o._v("你访问 A 时，淘宝 js 设置 cookie ，记录下商品信息")]),o._v(" "),t("li",[o._v("你再次访问淘宝时，淘宝即可获取这个 cookie 内容")]),o._v(" "),t("li",[o._v("再和你的个人信息（也在 cookie 里）一起发送到服务端，这样就知道了你看了哪个商品")])]),o._v(" "),t("h3",{attrs:{id:"cookie-session登录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie-session登录"}},[o._v("#")]),o._v(" cookie+session登录")]),o._v(" "),t("p",[o._v("使用 cookie 做登录校验")]),o._v(" "),t("ul",[t("li",[o._v("前端输入用户名密码，传给后端")]),o._v(" "),t("li",[o._v("后端验证成功，返回信息给客户端信息时set-cookie，cookie里面有唯一标识该用户的sessionID")]),o._v(" "),t("li",[o._v("接下来所有接口访问，都自动带上 cookie（浏览器的默认行为， http 协议的规定),在服务器验证信息")])]),o._v(" "),t("h4",{attrs:{id:"什么是-session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-session"}},[o._v("#")]),o._v(" 什么是 session ？")]),o._v(" "),t("ul",[t("li",[o._v("cookie 只存储 userId ，不去暴露用户信息")]),o._v(" "),t("li",[o._v("用户信息存储在 session 中")]),o._v(" "),t("li",[o._v("session 就是服务端的一个 hash 表")]),o._v(" "),t("li",[o._v("存储session 就要需要考虑吧内存的问题（基于Redis 存储 Session）")])]),o._v(" "),t("h2",{attrs:{id:"token认证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#token认证"}},[o._v("#")]),o._v(" token认证")]),o._v(" "),t("ul",[t("li",[o._v("cookie是http 协议规范的，而 token 是自定义的，可以用任何方式传输（如 header body query-string 等）")]),o._v(" "),t("li",[o._v("token 默认不会在浏览器存储")]),o._v(" "),t("li",[o._v("token 没有跨域限制")])]),o._v(" "),t("h3",{attrs:{id:"token-localstorage登录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#token-localstorage登录"}},[o._v("#")]),o._v(" token+localstorage登录")]),o._v(" "),t("ul",[t("li",[o._v("用户登录，后端验证成功，token值到redis，并且返回给客户端token")]),o._v(" "),t("li",[o._v("token一般是一串随机的字符(比如UUID)，value一般是用户ID，并且设置一个过期时间")]),o._v(" "),t("li",[o._v("token可以存在localstorage或者vuex中")]),o._v(" "),t("li",[o._v("每次请求服务的时候带上token在请求头，")]),o._v(" "),t("li",[o._v("后端接收到token则根据token查一下redis是否存在，")]),o._v(" "),t("li",[o._v("如果存在则表示用户已认证，")]),o._v(" "),t("li",[o._v("如果token不存在则跳到登录界面让用户重新登录，登录成功后返回一个token值给客户端")])]),o._v(" "),t("h4",{attrs:{id:"jwt-json-web-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jwt-json-web-token"}},[o._v("#")]),o._v(" JWT(JSON Web Token)")]),o._v(" "),t("ul",[t("li",[o._v("前端输入用户名密码，传给后端")]),o._v(" "),t("li",[o._v("后端验证成功，返回一段 token 字符串 - 将用户信息加密之后得到的")]),o._v(" "),t("li",[o._v("前端获取 token 之后，存储下来")]),o._v(" "),t("li",[o._v("以后访问接口，都在 header 中带上这段 token")])]),o._v(" "),t("p",[t("img",{attrs:{src:"/http/token.png",alt:""}})]),o._v(" "),t("h2",{attrs:{id:"cookie和token区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie和token区别"}},[o._v("#")]),o._v(" cookie和token区别")]),o._v(" "),t("ul",[t("li",[o._v("cookie 是 http 规范，而 token 是自定义传递；")]),o._v(" "),t("li",[o._v("cookie 会默认被浏览器存储，而 token 需要自己存储；")]),o._v(" "),t("li",[o._v("cookie 默认有跨域限制，token 默认没有跨域限制；")]),o._v(" "),t("li",[o._v("cookie 一般配合 session 使用，token 一般用于 jwt（json web token）")])]),o._v(" "),t("h2",{attrs:{id:"session和jwt哪个更优"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session和jwt哪个更优"}},[o._v("#")]),o._v(" session和JWT哪个更优")]),o._v(" "),t("p",[o._v("Session 优点")]),o._v(" "),t("ul",[t("li",[o._v("原理简单，易于学习")]),o._v(" "),t("li",[o._v("用户信息存储在服务端，可以快速封禁某个登录的用户 —— 有这方强需求的人，一定选择 Session")])]),o._v(" "),t("p",[o._v("Session 缺点")]),o._v(" "),t("ul",[t("li",[o._v("占用服务端内存，有硬件成本")]),o._v(" "),t("li",[o._v("多进程、多服务器时，不好同步 —— 一般使用第三方 redis 存储 ，成本高")]),o._v(" "),t("li",[o._v("跨域传递 cookie ，需要特殊配置")])]),o._v(" "),t("p",[o._v("JWT 的优点")]),o._v(" "),t("ul",[t("li",[o._v("不占用服务器内存")]),o._v(" "),t("li",[o._v("多进程、多服务器，不受影响")]),o._v(" "),t("li",[o._v("不受跨域限制")])]),o._v(" "),t("p",[o._v("JWT 的缺点")]),o._v(" "),t("ul",[t("li",[o._v("无法快速封禁登录的用户")]),o._v(" "),t("li",[o._v("token 体积一般大于 cookie，会增加请求的数据量")])]),o._v(" "),t("p",[o._v("总结：如果没有“快速封禁登录用户”的需求，建议使用 JWT 方式。")])])}),[],!1,null,null,null);e.default=s.exports}}]);