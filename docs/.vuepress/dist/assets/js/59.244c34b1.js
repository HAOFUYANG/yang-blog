(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{507:function(a,t,s){"use strict";s.r(t);var e=s(59),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器的缓存机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的缓存机制"}},[a._v("#")]),a._v(" 浏览器的缓存机制")]),a._v(" "),s("h2",{attrs:{id:"协商缓存和强缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存和强缓存"}},[a._v("#")]),a._v(" 协商缓存和强缓存")]),a._v(" "),s("h3",{attrs:{id:"强缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[a._v("#")]),a._v(" 强缓存")]),a._v(" "),s("p",[a._v("浏览器中的缓存作用分为两种情况，一种是需要发送HTTP请求，一种是不需要发送。")]),a._v(" "),s("p",[a._v("首先检查强缓存，这个阶段不需要发送HTTP请求")]),a._v(" "),s("p",[a._v("通过请求头中相应的字段来进行检查，在HTTP/1.0和HTTP/1.1当中，这个字段是不一样的。")]),a._v(" "),s("ul",[s("li",[a._v("HTTP/1.0时期，使用的是Expires，")]),a._v(" "),s("li",[a._v("HTTP/1.1使用的是Cache-Control。")])]),a._v(" "),s("h4",{attrs:{id:"expires"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[a._v("#")]),a._v(" "),s("code",[a._v("Expires")])]),a._v(" "),s("p",[a._v("Expires即过期时间。存在于服务端返回的响应头中，告诉浏览器在这个过期时间之前可以直接从缓存里面获取数据，无需再次请求。")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("Expires")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Wed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("22")]),a._v(" Nov "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2019")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("08")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("41")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("00")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("GMT")]),a._v("\n")])])]),s("p",[a._v("这里会有一个问题，那就是服务器的时间和浏览器的时间可能并不一致，那服务器返回的这个过期时间可能就是不准确的。因此这种方式很快在后来的HTTP1.1版本中被抛弃了...."),s("br"),a._v("\n引入"),s("strong",[a._v("Cache-Control")])]),a._v(" "),s("h4",{attrs:{id:"cache-control"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[a._v("#")]),a._v(" "),s("code",[a._v("Cache-Control")])]),a._v(" "),s("p",[a._v("和Expires本质的不同在于它并没有采用具体的过期时间点这个方式，而是采用过期时长来控制缓存，对应的字段是max-age")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("Cache"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("max"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("age"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("360")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//代表这个响应返回后在 3600 秒，也就是一个小时之内可以直接使用缓存")]),a._v("\n")])])]),s("p",[a._v("其他的属性")]),a._v(" "),s("ul",[s("li",[a._v("public：客户端和代理服务器都可以缓存。因为一个请求可能要经过不同的代理服务器最后才到达目标服务器，那么结果就是不仅仅浏览器可以缓存数据，中间的任何代理节点都可以进行缓存。")]),a._v(" "),s("li",[a._v("private：这种情况就是只有浏览器能缓存了，中间的代理服务器不能缓存。")]),a._v(" "),s("li",[a._v("no-cache：跳过当前的强缓存，发送HTTP请求，即直接进入协商缓存阶段。")]),a._v(" "),s("li",[a._v("no-atore：非常粗暴，不进行任何形式的缓存。")]),a._v(" "),s("li",[a._v("s-maxage：这和max-age长得比较像，但是区别在于s-maxage是针对代理服务器的缓存时间。值得注意的是，当Expires和Cache-Control同时存在的时候，Cache-Control会优先考虑。")])]),a._v(" "),s("p",[a._v("还存在一种情况，当资源缓存时间超时了，也就是强缓存失效了，接下来怎么办？"),s("br"),a._v("\n引入"),s("strong",[a._v("协商缓存")])]),a._v(" "),s("h3",{attrs:{id:"协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[a._v("#")]),a._v(" 协商缓存")]),a._v(" "),s("p",[a._v("强缓存失效之后，浏览器在请求头中携带相应的缓存tag来向服务器发请求，由服务器根据这个"),s("strong",[a._v("tag")]),a._v("，决定是否使用缓存，这就是协商缓存")]),a._v(" "),s("ul",[s("li",[a._v("Last-Modified")]),a._v(" "),s("li",[a._v("ETag")])]),a._v(" "),s("h4",{attrs:{id:"last-modified-最后修改时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-最后修改时间"}},[a._v("#")]),a._v(" Last-Modified（最后修改时间）")]),a._v(" "),s("p",[a._v("1、在浏览器第一次给服务器发送请求后，服务器会在"),s("strong",[a._v("响应头")]),a._v("中加上这个字段。")]),a._v(" "),s("p",[a._v("2、浏览器接收到后，如果再次请求，会在请求头中携带"),s("code",[a._v("If-Modified-Since")]),a._v("字段，这个字段的值也就是服务器传来的最后修改时间。")]),a._v(" "),s("p",[a._v("3、服务器拿到请求头中的"),s("code",[a._v("If-Modified-Since")]),a._v("的字段后，其实会和这个服务器中该资源的最后修改时间对比:")]),a._v(" "),s("p",[a._v("4、如果请求头中的这个值小于最后修改时间，说明是时候更新了。返回新的资源，跟常规的HTTP请求响应的流程一样。")]),a._v(" "),s("p",[a._v("5、否则返回304，告诉浏览器直接用缓存。")]),a._v(" "),s("h4",{attrs:{id:"etag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#etag"}},[a._v("#")]),a._v(" ETag")]),a._v(" "),s("p",[a._v("1、ETag 是服务器根据当前文件的内容，给文件生成的唯一标识，只要里面的内容有改动，这个值就会变。服务器通过响应头把这个值给浏览器。")]),a._v(" "),s("p",[a._v("2、浏览器接收到ETag的值，会在下次请求时，将这个值作为If-None-Match这个字段的内容，并放到请求头中，然后发给服务器。")]),a._v(" "),s("p",[a._v("3、服务器接收到If-None-Match后，会跟服务器上该资源的ETag进行比对:")]),a._v(" "),s("p",[a._v("4、如果两者不一样，说明要更新了。返回新的资源，跟常规的HTTP请求响应的流程一样。否则返回304，告诉浏览器直接用缓存。")])])}),[],!1,null,null,null);t.default=r.exports}}]);